#!/usr/bin/env php
<?php

// Find and initialize Composer
$files = array(
  __DIR__ . '/../../vendor/autoload.php',
  __DIR__ . '/../../../../autoload.php',
  __DIR__ . '/../vendor/autoload.php',
);

$found = false;
foreach ($files as $file) {
	if (file_exists($file)) {
		require_once $file;
		break;
	}
}

if (!class_exists('Composer\Autoload\ClassLoader', false)) {
	die(
		'You need to set up the project dependencies using the following commands:' . PHP_EOL .
		'curl -s http://getcomposer.org/installer | php' . PHP_EOL .
		'php composer.phar install' . PHP_EOL
	);
}

$QUEUE = getenv('QUEUE');
if(empty($QUEUE)) {
	die("Set QUEUE env var containing the list of queues to work.\n");
}

$REDIS_BACKEND = getenv('REDIS_BACKEND');
if(!empty($REDIS_BACKEND)) {
	Resque::setBackend($REDIS_BACKEND);
}

$logLevel = 0;
$LOGGING = getenv('LOGGING');
$VERBOSE = getenv('VERBOSE');
$VVERBOSE = getenv('VVERBOSE');
if(!empty($LOGGING) || !empty($VERBOSE)) {
	$logLevel = Resque_Worker::LOG_NORMAL;
}
else if(!empty($VVERBOSE)) {
	$logLevel = Resque_Worker::LOG_VERBOSE;
}

$APP_INCLUDE = getenv('APP_INCLUDE');
if($APP_INCLUDE) {
	if(!file_exists($APP_INCLUDE)) {
		die('APP_INCLUDE ('.$APP_INCLUDE.") does not exist.\n");
	}

	require_once $APP_INCLUDE;
}

$interval = 5;
$INTERVAL = getenv('INTERVAL');
if(!empty($INTERVAL)) {
	$interval = $INTERVAL;
}

$count = 1;
$COUNT = getenv('COUNT');
if(!empty($COUNT) && $COUNT > 1) {
	$count = $COUNT;
}

$jobStrategy=null;
$JOB_STRATEGY = getenv('JOB_STRATEGY');
switch($JOB_STRATEGY) {
	case 'inprocess':
		$jobStrategy = new Resque_JobStrategy_InProcess;
		break;
	case 'fork':
		$jobStrategy = new Resque_JobStrategy_Fork;
		break;
	case 'fastcgi':
		$fastcgiLocation = '127.0.0.1:9000';
		$FASTCGI_LOCATION = getenv('FASTCGI_LOCATION');
		if (!empty($FASTCGI_LOCATION)) {
			$fastcgiLocation = $FASTCGI_LOCATION;
		}

		$fastcgiScript = dirname(__FILE__).'/extras/fastcgi_worker.php';
		$FASTCGI_SCRIPT = getenv('FASTCGI_SCRIPT');
		if (!empty($FASTCGI_SCRIPT)) {
			$fastcgiScript = $FASTCGI_SCRIPT;
		}

		require_once dirname(__FILE__).'/lib/Resque/JobStrategy/Fastcgi.php';
		$jobStrategy = new Resque_JobStrategy_Fastcgi(
			$fastcgiLocation,
			$fastcgiScript,
			array(
				'APP_INCLUDE'   => $APP_INCLUDE,
				'REDIS_BACKEND' => $REDIS_BACKEND,
			)
		);
		break;
}

if($count > 1) {
	for($i = 0; $i < $count; ++$i) {
		$pid = Resque::fork();
		if($pid == -1) {
			die("Could not fork worker ".$i."\n");
		}
		// Child, start the worker
		else if(!$pid) {
			$queues = explode(',', $QUEUE);
			$worker = new Resque_Worker($queues);
			$worker->logLevel = $logLevel;
			if ($jobStrategy) {
				$worker->setJobStrategy($jobStrategy);
			}
			fwrite(STDOUT, '*** Starting worker '.$worker."\n");
			$worker->work($interval);
			break;
		}
	}
}
// Start a single worker
else {
	$queues = explode(',', $QUEUE);
	$worker = new Resque_Worker($queues);
	$worker->logLevel = $logLevel;
	if ($jobStrategy) {
		$worker->setJobStrategy($jobStrategy);
	}

	$PIDFILE = getenv('PIDFILE');
	if ($PIDFILE) {
		file_put_contents($PIDFILE, getmypid()) or
			die('Could not write PID information to ' . $PIDFILE);
	}

	fwrite(STDOUT, '*** Starting worker '.$worker."\n");
	$worker->work($interval);
}
?>
